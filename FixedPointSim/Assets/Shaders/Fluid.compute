// StableFluids - A GPU implementation of Jos Stam's Stable Fluids on Unity
// https://github.com/keijiro/StableFluids

#pragma kernel Advect
#pragma kernel Force
#pragma kernel PSetup
#pragma kernel PFinish
#pragma kernel Jacobi1
#pragma kernel Jacobi2

// Fixed-Point Constants
#define FRACTIONAL_BITS 22
#define SCALING_FACTOR (1 << FRACTIONAL_BITS)
#define FIXED_ONE SCALING_FACTOR // Represent 1.0 in fixed-point

// Fixed-Point Conversion Functions
#define ToFixed(x) ((int)((x) * SCALING_FACTOR))
#define ToFloat(x) ((float)(x) / SCALING_FACTOR)
#define ToFixedFloat(x) (ToFloat(ToFixed(x)))

#define ToFixed2(v) (int2(ToFixed(v.x), ToFixed(v.y)))
#define ToFloat2(v) (float2(ToFloat(v.x), ToFloat(v.y)))
#define ToFixedFloat2(v) (ToFloat2(ToFixed2(v)))

// Fixed-Point Arithmetic Operations
//#define FAdd(a, b) ((int)((a) + (b)))
//#define FSub(a, b) ((int)((a) - (b)))
//#define FMul(a, b) ((int)(((a) * (b)) >> FRACTIONAL_BITS))
//#define FDiv(a, b) ((int)(((a) << FRACTIONAL_BITS) / (b)))

//#define FAdd2_S(a, b) (int2(FAdd(a.x, b), FAdd(a.y, b)))
//#define FAdd2_V(a, b) (int2(FAdd(a.x, b.x), FAdd(a.y, b.y)))
//#define FSub2_S(a, b) (int2(FSub(a.x, b), FSub(a.y, b)))
//#define FSub2_V(a, b) (int2(FSub(a.x, b.x), FSub(a.y, b.y)))
//#define FMul2_S(a, b) (int2(FMul(a.x, b), FMul(a.y, b)))
//#define FMul2_V(a, b) (int2(FMul(a.x, b.x), FMul(a.y, b.y)))
//#define FDiv2_S(a, b) (int2(FDiv(a.x, b), FDiv(a.y, b)))
//#define FDiv2_V(a, b) (int2(FDiv(a.x, b.y), FDiv(a.y, b.y)))

// Common parameter
float DeltaTime;

// External force
struct ForceData
{
    float2 ForceOrigin;
    float2 ForceVector;
};

StructuredBuffer<ForceData> Forces;
int ForceCount;
float ForceExponent;

// U (velocity field)
Texture2D<float2> U_in;
SamplerState samplerU_in;
RWTexture2D<float2> U_out;

// W (velocity field; working)
Texture2D<float2> W_in;
RWTexture2D<float2> W_out;

// Div W
RWTexture2D<float> DivW_out;

// P (pressure field)
Texture2D<float> P_in;
RWTexture2D<float> P_out;

// Jacobi method arguments
float Alpha, Beta;

Texture2D<float> X1_in;
Texture2D<float> B1_in;
RWTexture2D<float> X1_out;

Texture2D<float2> X2_in;
Texture2D<float2> B2_in;
RWTexture2D<float2> X2_out;

// Advect step
[numthreads(8, 8, 1)]
void Advect(uint2 tid : SV_DispatchThreadID)
{
    uint2 dim;
    W_out.GetDimensions(dim.x, dim.y);

    float2 uv = (tid + 0.5) / dim;
    uv = ToFixedFloat2(uv);
    float2 duv = U_in[tid] * ToFixedFloat2(float2((float)dim.y / dim.x, 1)) * ToFixedFloat(DeltaTime);
    duv = ToFixedFloat2(duv);

    float2 wOut = U_in.SampleLevel(samplerU_in, uv - duv, 0);
    W_out[tid] = ToFixedFloat2(wOut);
}

// Add-force step
[numthreads(8, 8, 1)]
void Force(uint2 tid : SV_DispatchThreadID)
{
    uint2 dim;
    W_out.GetDimensions(dim.x, dim.y);

    float2 pos = (tid + 0.5 - dim * 0.5) / dim.y;
    pos = ToFixedFloat2(pos);
    float2 totalForce = float2(0, 0);
    
    for (int i = 0; i < ForceCount; ++i)
    {
        float amp = exp(
            ToFixedFloat(-ForceExponent) *
            ToFixedFloat(distance(ToFixedFloat2(Forces[i].ForceOrigin), pos))
        );
        amp = ToFixedFloat(amp);
        totalForce += ToFixedFloat2(Forces[i].ForceVector) * amp;
    }
    
    float2 wOut = W_in[tid] + totalForce;
    W_out[tid] = ToFixedFloat2(wOut);
}

// Setup for Project step (divW calculation)
[numthreads(8, 8, 1)]
void PSetup(uint2 tid : SV_DispatchThreadID)
{
    uint2 dim;
    W_in.GetDimensions(dim.x, dim.y);

    float divWOut = ToFixedFloat(W_in[tid + int2(1, 0)].x - W_in[tid - int2(1, 0)].x +
                    W_in[tid + int2(0, 1)].y - W_in[tid - int2(0, 1)].y) * ToFixedFloat(dim.y / 2);
    DivW_out[tid] = ToFixedFloat(divWOut);

    P_out[tid] = 0;
}

// Finishing for Project step (divergence free field calculation)
[numthreads(8, 8, 1)]
void PFinish(uint2 tid : SV_DispatchThreadID)
{
    uint2 dim;
    W_in.GetDimensions(dim.x, dim.y);

    if (any(tid == 0) || any(tid == dim - 1)) return;

    float P1 = P_in[max(tid - int2(1, 0), 1)];
    float P2 = P_in[min(tid + int2(1, 0), dim - 2)];
    float P3 = P_in[max(tid - int2(0, 1), 1)];
    float P4 = P_in[min(tid + int2(0, 1), dim - 2)];
    
    float2 u = W_in[tid] - ToFixedFloat2(float2(P2 - P1, P4 - P3)) * ToFixedFloat(dim.y / 2);
    u = ToFixedFloat2(u);

    U_out[tid] = u;

    if (tid.x == 1) U_out[int2(0, tid.y)] = -u;
    if (tid.y == 1) U_out[int2(tid.x, 0)] = -u;
    if (tid.x == dim.x - 2) U_out[int2(dim.x - 1, tid.y)] = -u;
    if (tid.y == dim.y - 2) U_out[int2(tid.x, dim.y - 1)] = -u;
}

// Jacobi method with a scalar field
[numthreads(8, 8, 1)]
void Jacobi1(uint2 tid : SV_DispatchThreadID)
{
    float x1Out = (X1_in[tid - int2(1, 0)] + X1_in[tid + int2(1, 0)] +
                    X1_in[tid - int2(0, 1)] + X1_in[tid + int2(0, 1)] +
                    ToFixedFloat(ToFixedFloat(Alpha) * B1_in[tid])) / ToFixedFloat(Beta);
    X1_out[tid] = ToFixedFloat(x1Out);
}

// Jacobi method with a vector field
[numthreads(8, 8, 1)]
void Jacobi2(uint2 tid : SV_DispatchThreadID)
{
    float2 x2Out = (X2_in[tid - int2(1, 0)] + X2_in[tid + int2(1, 0)] +
                    X2_in[tid - int2(0, 1)] + X2_in[tid + int2(0, 1)] +
                    ToFixedFloat2(ToFixedFloat(Alpha) * B2_in[tid])) / ToFixedFloat(Beta);
    X2_out[tid] = ToFixedFloat2(x2Out);
}
